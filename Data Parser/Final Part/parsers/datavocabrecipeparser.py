# This file contains functions related to parsing data in http://www.data-vocabulary.org/Recipe/ format.# You can find related information and specifications on http://www.data-vocabulary.org/Recipe/import microdataimport urllibfrom recipe import Recipe# Function to get data-vocabulary.org/Recipe/ format data items from html datadef parseDataVocabularyData(htmldata, url):	'''This function gets data embeded using format data-vocabulary.org/Recipe/ in <htmldata> and iterate through	   each item and creates a list of Recipe objects containing these grabbed items.	   It uses microdata library.		'''		print "Entered into parseDataVocabularyData() function"	print "Parsing DataVocabulary Recipe format"	retrivedItems = [] # List to hold retrieved items	appendToList = retrivedItems.append	if(len(htmldata)<=0):		return []	items = microdata.get_items(htmldata)	if items and len(items)>0:				for item in items:			r = Recipe('','')			r.link = str(url)			r.name = item.name						# Validation for description			if item.summary and len(item.summary) >0:				r.description = item.summary						# Validation for photo			if item.photo and len(str(item.photo)) >0:				r.image = str(item.photo)							# Validation for prepTime			if item.prepTime and len(item.prepTime) >0:				r.prepTime = item.prepTime						# Validation for cookTime			if item.cookTime and len(item.cookTime) >0:				r.cookTime = item.cookTime							# Validation for yield			if item.get('yield') and len(item.get('yield')) >0:				r.servings = item.get('yield')						# Validation for ingredients			if item.get_all('ingredient')and len(item.get_all('ingredient')) >0:				append = r.ingredients.append				for ing in item.get_all('ingredient'):					append(ing.name + " : " + ing.amount)										# Validation for instructions			if item.get_all('instructions') and len(item.get_all('instructions')) >0:				append = r.preparation.append				for inst in item.get_all('instructions'):					append(str(inst))						# Validation for nutrition			if item.get('nutrition'):				# Validation for calories				if item.nutrition.calories and len(item.nutrition.calories)>0:					r.calories = item.nutrition.calories				# Validation for fat				if item.nutrition.fat and len(item.nutrition.fat)>0:					r.fat = item.nutrition.fat				# Validation for saturatedFat				if item.nutrition.saturatedFat and len(item.nutrition.saturatedFat)>0:					r.saturatedFat = item.nutrition.saturatedFat								# NOTE : Specification for salt is not provided by this format so no implemented here				#if item.nutrition.salt and len(item.nutrition.salt)>0:				#	r.salt = item.nutrition.salt								# Validation for sugar				if item.nutrition.sugar and len(item.nutrition.sugar)>0:					r.sugar = item.nutrition.sugar																# Validation for categories			if item.recipeType and len(item.recipeType) >0:				r.categories = item.recipeType							# NOTE : Salt, Ratings, Tags and Keywords properties are not supported by standard 			#        specifications of Schema.org/Recipe. Check out site http://www.schema.org/Recipe						appendToList(r)					return retrivedItems																																						# Sample test urls# http://www.taste.com.au/recipes/28003/chicken+pasta+bakes		# http://thepioneerwoman.com/cooking/2011/09/cajun-chicken-pasta/						# Testing of parser for Schema.org/Recipe format#l = parseDataVocabularyData(f, 'http://www.taste.com.au/recipes/28003/chicken+pasta+bakes')#l = parseDataVocabularyData(urllib.urlopen('http://thepioneerwoman.com/cooking/2011/09/cajun-chicken-pasta/').read(),'')#print "Hello"#for i in l:#	print "Name : " + i.name#	print "Deascription : " + i.description#	print "Image :" + i.image#	print "PrepTime : " + i.prepTime#	print "CookTime : " + i.cookTime#	print "Servings : " + i.servings#	print "########################"#	print "_________________" + str(len(i.ingredients))#	print "Ingredients : " + str(i.ingredients)#	print "_________________" + str(len(i.preparation))#	print "Preparation : " + str(i.preparation)#	print "########################"#	print "Calories : " + i.calories#	print "Saturated Fat : " + i.saturatedFat#	print "Fat : " + i.fat#	print "Salt : " + i.salt#	print "Sugar : " + i.sugar#	print "Categories : " + i.categories	